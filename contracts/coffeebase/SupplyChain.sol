pragma solidity ^0.5.16;

import "../coffeeaccesscontrol/DistributorRole.sol";
import "../coffeeaccesscontrol/ConsumerRole.sol";
import "../coffeeaccesscontrol/RetailerRole.sol";
import "../coffeeaccesscontrol/FarmerRole.sol";
import "../coffeecore/Ownable.sol";

contract SupplyChain is Ownable, ConsumerRole, RetailerRole, DistributorRole, FarmerRole {

    // Define 'owner'
    address payable contractOwner;

    // Define a variable called 'upc' for Universal Product Code (UPC)
    uint  upc;

    // Define a variable called 'sku' for Stock Keeping Unit (SKU)
    uint  sku;

    // Define a public mapping 'items' that maps the UPC to an Item.
    mapping(uint => Item) items;

    // Define a public mapping 'itemsHistory' that maps the UPC to an array of TxHash,
    mapping(uint => string[]) itemsHistory;

    // Define enum 'State' with the following values:
    enum State
    {
        Harvested,
        Processed,
        Packed,
        ForSale,
        Sold,
        Shipped,
        Received,
        Purchased
    }

    State constant defaultState = State.Harvested;

    // Define a struct 'Item' with the following fields:
    struct Item {
        uint sku;  // Stock Keeping Unit (SKU)
        uint upc; // Universal Product Code (UPC), generated by the Farmer, goes on the package, can be verified by the Consumer
        address ownerID;  // Metamask-Ethereum address of the current owner as the product moves through 8 stages
        address originFarmerID; // Metamask-Ethereum address of the Farmer
        string originFarmName; // Farmer Name
        string originFarmInformation;  // Farmer Information
        string originFarmLatitude; // Farm Latitude
        string originFarmLongitude;  // Farm Longitude
        uint productID;  // Product ID potentially a combination of upc + sku
        string productNotes; // Product Notes
        uint productPrice; // Product Price
        State itemState;  // Product State as represented in the enum above
        address distributorID;  // Metamask-Ethereum address of the Distributor
        address retailerID; // Metamask-Ethereum address of the Retailer
        address consumerID; // Metamask-Ethereum address of the Consumer
    }

    event Harvested(uint upc);
    event Processed(uint upc);
    event Packed(uint upc);
    event ForSale(uint upc);
    event Sold(uint upc);
    event Shipped(uint upc);
    event Received(uint upc);
    event Purchased(uint upc);

    // Define a modifer that checks to see if msg.sender == owner of the contract
    modifier onlyOwner() {
        require(msg.sender == contractOwner);
        _;
    }

    // Define a modifer that verifies the Caller
    modifier verifyCaller (address _address) {
        require(msg.sender == _address);
        _;
    }

    // Define a modifier that checks if the paid amount is sufficient to cover the price
    modifier paidEnough(uint _price) {
        require(msg.value >= _price);
        _;
    }

    // Define a modifier that checks the price and refunds the remaining balance
    modifier checkValue(uint _upc) {
        _;
        uint _price = items[_upc].productPrice;
        uint amountToReturn = msg.value - _price;
        address payable distributorAddress = address(uint160(items[_upc].distributorID));
        distributorAddress.transfer(amountToReturn);
    }

    // Define a modifier that checks if an item.state of a upc is Harvested
    modifier harvested(uint _upc) {
        require(items[_upc].itemState == State.Harvested);
        _;
    }

    // Define a modifier that checks if an item.state of a upc is Processed
    modifier processed(uint _upc) {
        require(items[_upc].itemState == State.Processed);
        _;
    }

    // Define a modifier that checks if an item.state of a upc is Packed
    modifier packed(uint _upc) {
        require(items[_upc].itemState == State.Packed);
        _;
    }

    // Define a modifier that checks if an item.state of a upc is ForSale
    modifier forSale(uint _upc) {
        require(items[_upc].itemState == State.ForSale);
        _;
    }

    // Define a modifier that checks if an item.state of a upc is Sold
    modifier sold(uint _upc) {
        require(items[_upc].itemState == State.Sold);
        _;
    }

    // Define a modifier that checks if an item.state of a upc is Shipped
    modifier shipped(uint _upc) {
        require(items[_upc].itemState == State.Shipped);
        _;
    }

    // Define a modifier that checks if an item.state of a upc is Received
    modifier received(uint _upc) {
        require(items[_upc].itemState == State.Received);
        _;
    }

    // Define a modifier that checks if an item.state of a upc is Purchased
    modifier purchased(uint _upc) {
        require(items[_upc].itemState == State.Purchased);
        _;
    }

    constructor() public payable {
        contractOwner = msg.sender;
        sku = 1;
        upc = 1;
    }

    // Define a function 'kill' if required
    function kill() public {
        if (msg.sender == contractOwner) {
            address payable destruct = contractOwner;
            selfdestruct(destruct);
        }
    }

    // Define a function 'harvestCoffee' that allows a farmer to mark an item 'Harvested'
    function harvestCoffee(uint _upc, address _originFarmerID, string  memory _originFarmName, string memory _originFarmInformation,
        string memory _originFarmLatitude, string memory _originFarmLongitude, string memory _productNotes) public onlyFarmer() {

        items[_upc] = Item({sku : sku, upc : _upc, ownerID : _originFarmerID, originFarmerID : _originFarmerID,
            originFarmName : _originFarmName, originFarmInformation : _originFarmInformation, originFarmLatitude : _originFarmLatitude,
            originFarmLongitude : _originFarmLongitude, productID : _upc + sku, productNotes : _productNotes, productPrice : 0, itemState : State.Harvested,
            distributorID : address(0), retailerID : address(0), consumerID : address(0)});

        sku = sku + 1;
        emit Harvested(_upc);
    }

    // Define a function 'processCoffee' that allows a farmer to mark an item 'Processed'
    function processCoffee(uint _upc) public harvested(_upc) verifyCaller(items[_upc].ownerID) {
        items[_upc].itemState = State.Processed;
        emit Processed(_upc);
    }

    // Define a function 'packItem' that allows a farmer to mark an item 'Packed'
    function packItem(uint _upc) public processed(_upc) verifyCaller(items[_upc].ownerID) {
        items[_upc].itemState = State.Packed;
        emit Packed(_upc);
    }

    // Define a function 'sellItem' that allows a farmer to mark an item 'ForSale'
    function sellItem(uint _upc, uint _price) public packed(_upc) verifyCaller(items[_upc].ownerID) {
        items[_upc].itemState = State.ForSale;
        items[_upc].productPrice = _price;
        emit ForSale(_upc);
    }

    // Define a function 'buyItem' that allows the distributor to mark an item 'Sold'
    function buyItem(uint _upc) public payable forSale(_upc) onlyDistributor() paidEnough(items[_upc].productPrice) checkValue(_upc) {
        items[_upc].itemState = State.Sold;
        items[_upc].ownerID = msg.sender;
        items[_upc].distributorID = msg.sender;

        address payable farmerAddress = address(uint160(items[_upc].originFarmerID));
        farmerAddress.transfer(items[_upc].productPrice);

        emit Sold(_upc);
    }

    function shipItem(uint _upc) public sold(_upc) verifyCaller(items[_upc].ownerID) {
        items[_upc].itemState = State.Shipped;
        emit Shipped(_upc);
    }

    // Define a function 'receiveItem' that allows the retailer to mark an item 'Received'
    function receiveItem(uint _upc) public shipped(_upc) onlyRetailer() onlyRetailer() {
        items[_upc].itemState = State.Received;
        items[_upc].ownerID = msg.sender;
        items[_upc].retailerID = msg.sender;

        emit Received(_upc);
    }

    // Define a function 'purchaseItem' that allows the consumer to mark an item 'Purchased'
    function purchaseItem(uint _upc) public received(_upc) onlyConsumer() {
        items[_upc].itemState = State.Purchased;
        items[_upc].ownerID = msg.sender;
        items[_upc].consumerID = msg.sender;

        emit Purchased(_upc);
    }

    // Define a function 'fetchItemBufferOne' that fetches the data
    function fetchItemBufferOne(uint _upc) public view returns (uint itemSKU, uint itemUPC, address ownerID,
        address originFarmerID, string memory originFarmName, string memory originFarmInformation, string memory originFarmLatitude,
        string memory originFarmLongitude) {

        Item memory item = items[_upc];
        return
        (
        item.sku,
        item.upc,
        item.ownerID,
        item.originFarmerID,
        item.originFarmName,
        item.originFarmInformation,
        item.originFarmLatitude,
        item.originFarmLongitude
        );
    }

    // Define a function 'fetchItemBufferTwo' that fetches the data
    function fetchItemBufferTwo(uint _upc) public view returns (uint itemSKU, uint itemUPC, uint productID,
        string memory productNotes, uint productPrice, uint itemState, address distributorID, address retailerID,
        address consumerID){
        string memory productNotes = items[_upc].productNotes;
        Item memory item = items[_upc];

        return
        (
        item.sku,
        item.upc,
        item.productID,
        productNotes,
        item.productPrice,
        uint(item.itemState),
        item.distributorID,
        item.retailerID,
        item.consumerID
        );
    }
}
